# Sources de données exploitées dans l'étude {.unnumbered}

En accord avec les acteurs de l’environnement en Nouvelle-Calédonie, des données environnementales ont été mise à disposition de l’OEIL afin de caractériser l’impact des incendies sur les milieux. Ainsi, des traitements ont été effectués en utilisant ces données afin de pouvoir quantifier le nombre d’incendies et la superficie incendiée pour chaque source d’information étudiée. Le @tbl-source-impact présente les informations étudiées ainsi que leurs principales caractéristiques.

{{< pagebreak >}}


```{python}
def export_output_plotly(data,figureName):
    saving_png = f'{export_file_path}{figureName}.png'
    saving_html = f'{export_file_path}{figureName}.html'

    data.write_image(saving_png)
    data.write_html(saving_html)
    return

export_file_path = 'C:/Users/oriane.bruyere/projets/output_bilan/data_sources/'

```

```{python}
#| echo: false
#| output: true
#| label: tbl-source-impact-environnement
#| warning: false
#| error: false

import pandas as pd
from io import StringIO
import plotly.graph_objects as go
from IPython.display import display, Markdown

figureName1 = "tbl-source-impact-environnement"

data = """
"Zone de fort micro-endémisme végétal","Données issues d’une modélisation déterminant la probabilité de localisation d'espèces micro-endémiques vasculaires. Extrait des zones à forte probabilité de micro-endémisme végétal, supérieures ou égales à 70% de densité d'espèces micro-endémiques vasculaires.","Ensemble de la Nouvelle-Calédonie","Adrien Wulff, UNC, IAC","2012"
"Périmètre d'alertes sur la faune et la flore menacées","Zone entourée d'un tampon de 100, 200 ou 500 m de diamètre, caractérisant la localisation des espèces faunistiques et floristiques menacées (Statut UICN ; CR : « En danger critique », EN : « En danger » et VU : « vulnérable » uniquement sur le critère D2)","Ensemble de la Nouvelle-Calédonie","Endemia","2021"
"Espèces Sensibles","Localisation de la compilation des observations naturalistes recensant la faune, la flore ou encore les champignons possédant un niveau d'enjeu plus ou moins important en fonction du classement UICN et de la rareté des espèces","Ensemble de la Nouvelle-Calédonie","Province Sud","2021"
"Mangroves","Données représentant la localisation des mangroves","Ensemble de la Nouvelle-Calédonie","Programme CARNAMA, IFRECOR","2020"
"Strates de végétation (arborée, arbustive, herbacée)","Localisation des types de végétation arborée, arbustive et herbacée","Ensemble de la Nouvelle-Calédonie","OEIL, Gouvernement de la Nouvelle-Calédonie","2014"
"Zones de vigilance pour le maintien des forêts sèches","Localisation des zones de vigilance primordiales pour le maintien de l’écosystème des forêts sèches","Ensemble de la Nouvelle-Calédonie","Conservatoire d'espaces naturels de Nouvelle-Calédonie","2021"
"Connectivités moyenne distance des forêts sèches","Localisation des liaisons entre les zones de vigilance de forêt sèche avec un seuil de distance minimal de 200 mètres","Ensemble de la Nouvelle-Calédonie","Conservatoire d'espaces naturels de Nouvelle-Calédonie","2021"
"Milieu d'intérêt important pour la conservation","Localisation des milieux d'intérêt important pour la conservation","Province Sud","Province Sud","2020"
"Milieu essentiel à la préservation de la biodiversité","Localisation des milieux essentiels à la préservation de la biodiversité","Province Sud","Province Sud","2020"
"Zones clés de biodiversité","Localisation des sites d'importance mondiale pour la conservation de la biodiversité identifiés à l'aide des standards internationaux UICN","Ensemble de la Nouvelle-Calédonie","Groupe : Profil d'Ecosystème de Nouvelle-Calédonie regroupant la Province Sud, la Province Nord, la Province des îles, le Gouvernement de Nouvelle-Calédonie, l'État Français, AFD, CI, SCO, WWF, AICA, IRD, UNC, IAC, IFREMER","2016"
"Forêt de la Province Nord","Localisation de tous types de forêts situées en Province Nord","Province Nord","Province Nord","2020"
"""
df = pd.read_csv(StringIO(data), header=None)
df.columns = ["Nom de la donnée", "Résumé", "Emprise spatiale", "Propriétaire de la donnée", "Date de la donnée utilisée et à jour"]

table = go.Figure(data=[go.Table(
    header=dict(
        values=list(df.columns),
        fill_color='lightblue',  
        align='left',
        line=dict(color='black', width=2)
    ),
    cells=dict(
        values=[df[col] for col in df.columns],
        fill_color='white',  
        align='left',
        line=dict(color='black', width=2) 
    ))
])

table.add_annotation(
    x=0,
    y=1.03,  
    xref="paper",
    yref="paper",
    text="(a) Impact sur l'environnement" ,
    showarrow=False,
    font=dict(size=16, color="black"),
    align="left",
)

table.update_layout(
    width=1700,
    height=825,
    margin=dict(l=0, r=0, t=25, b=0))

export_output_plotly(table,figureName1)

```

```{python}
#| echo: false
#| output: true
#| label: tbl-source-impact-agrigulture
#| warning: false
#| error: false

figureName2 = "tbl-source-impact-agrigulture"

data = """
"Parcelles - AGRIBASE","Localisation des parcelles agricoles de la Province Sud.","Province Sud","Province Sud","2020"
"""

df = pd.read_csv(StringIO(data), header=None)
df.columns = ["Nom de la donnée", "Résumé", "Emprise spatiale", "Propriétaire de la donnée", "Date de la donnée utilisée et à jour"]

table1 = go.Figure(data=[go.Table(
    header=dict(
        values=list(df.columns),
        fill_color='lightblue',  
        align='left',
        line=dict(color='black', width=2)
    ),
    cells=dict(
        values=[df[col] for col in df.columns],
        fill_color='white',  
        align='left',
        line=dict(color='black', width=2) 
    ))
])

table1.add_annotation(
    x=0,
    y=1.18,  
    xref="paper",
    yref="paper",
    text="(b) Impact sur l'agriculture" ,
    showarrow=False,
    font=dict(size=16, color="black"),
    align="left",
)


table1.update_layout(
    width=1700,
    height=150,
    margin=dict(l=0, r=0, t=25, b=0))

export_output_plotly(table1,figureName2)

```


```{python}
#| echo: false
#| output: true
#| label: tbl-source-impact-interet
#| warning: false
#| error: false

figureName3 = "tbl-source-impact-interet"

data = """
Nom de la donnée,Résumé,Emprise spatiale,Propriétaire de la donnée,Date de la donnée utilisée et à jour
"Zones tampons terrestres UNESCO","Localisation des zones tampons terrestres des biens inscrits au patrimoine mondial de l'UNESCO","Ensemble de la Nouvelle-Calédonie","IFRECOR","2011"
"Aires protégées provinciales terrestres","Localisation des zones terrestres de protection de l'environnement de compétence provinciale","Ensemble de la Nouvelle-Calédonie","Gouvernement de la Nouvelle-Calédonie, Province Sud, Province Nord","2021"
"Périmètres des zones humides Ramsar","Localisation des zones inscrites à la convention Ramsar, traité intergouvernemental servant de cadre à l'action nationale et à la coopération internationale en matière de conservation et d'utilisation rationnelle des zones humides et de leurs ressources","Plaines des Grands Lacs","Province Sud","2014"
"""

df = pd.read_csv(StringIO(data))

table = go.Figure(data=[go.Table(
    header=dict(
        values=list(df.columns),
        fill_color='lightblue',  
        align='left',
        line=dict(color='black', width=2)
    ),
    cells=dict(
        values=[df[col] for col in df.columns],
        fill_color='white',  
        align='left',
        line=dict(color='black', width=2) 
    ))
])

table.add_annotation(
    x=0,
    y=1.12,  
    xref="paper",
    yref="paper",
    text="(C) Impact sur les sites d'intérêts" ,
    showarrow=False,
    font=dict(size=16, color="black"),
    align="left",
)

table.update_layout(
    width=1700,
    height=260,
    margin=dict(l=0, r=0, t=25, b=0))

export_output_plotly(table,figureName3)

```

```{python}
#| echo: false
#| output: true
#| label: tbl-source-impact-ress-eau
#| warning: false
#| error: false

import pandas as pd
from io import StringIO
import plotly.graph_objects as go
from IPython.display import display, Markdown

figureName4 = "tbl-source-impact-ress-eau"

data = """
Nom de la donnée,Résumé,Emprise spatiale,Propriétaire de la donnée,Date de la donnée utilisée et à jour
"Périmètres de protection des eaux","Localisation des périmètres de protection des eaux destinées à la consommation humaine","Ensemble de la Nouvelle-Calédonie","Gouvernement de la Nouvelle-Calédonie","2020"
"Bassins versants producteurs d'eau potable","Localisation des bassins versants producteurs d'eau potable basée sur les captages surfaciques définies comme les surfaces ou superficies concourant à l’alimentation de captages ou de futurs captages","Ensemble de la Nouvelle-Calédonie","Gouvernement de la Nouvelle-Calédonie","2018"
"""

df = pd.read_csv(StringIO(data))

table = go.Figure(data=[go.Table(
    header=dict(
        values=list(df.columns),
        fill_color='lightblue',  
        align='left',
        line=dict(color='black', width=2)
    ),
    cells=dict(
        values=[df[col] for col in df.columns],
        fill_color='white',  
        align='left',
        line=dict(color='black', width=2) 
    ))
])

table.add_annotation(
    x=0,
    y=1.1,  
    xref="paper",
    yref="paper",
    text="(d) Impact sur la ressource en eau" ,
    showarrow=False,
    font=dict(size=16, color="black"),
    align="left",
)
table.update_layout(
    width=1700,
    height=240,
    margin=dict(l=0, r=0, t=25, b=0))

export_output_plotly(table,figureName4)

```

```{python}
#| echo: false
#| output: true
#| label: tbl-source-impact-feux
#| warning: false
#| error: false

import pandas as pd
from io import StringIO
import plotly.graph_objects as go
from IPython.display import display, Markdown

figureName5 = "tbl-source-impact-feux"

data = """
Nom de la donnée,Résumé,Emprise spatiale,Propriétaire de la donnée,Date de la donnée utilisée et à jour
"Bâtiments","Localisation de toutes édifications importantes, construites dans un but quelconque et représenté par un objet surfacique, issues de la BD TOPO.","Ensemble de la Nouvelle-Calédonie","Gouvernement de la Nouvelle-Calédonie","2021"
"Voiries","Localisation des différents types de voiries (voie non revêtue, allée piétonne aménagée, voie revêtue, piste, sentier, piste cyclable, gué, passerelle), issues de la BD TOPO.","Ensemble de la Nouvelle-Calédonie","Gouvernement de la Nouvelle-Calédonie","2021"
"""

df = pd.read_csv(StringIO(data))

table = go.Figure(data=[go.Table(
    header=dict(
        values=list(df.columns),
        fill_color='lightblue',  
        align='left',
        line=dict(color='black', width=2)
    ),
    cells=dict(
        values=[df[col] for col in df.columns],
        fill_color='white',  
        align='left',
        line=dict(color='black', width=2) 
    ))
])

table.add_annotation(
    x=0,
    y=1.1,  
    xref="paper",
    yref="paper",
    text="(e) Effets possibles des infrastructures humaines sur les incendies" ,
    showarrow=False,
    font=dict(size=16, color="black"),
    align="left",
)
table.update_layout(
    width=1700,
    height=270,
    margin=dict(l=0, r=0, t=25, b=0))

export_output_plotly(table,figureName5)

```

```{python}
#| echo: false
#| output: true
#| label: tbl-source-impact-feux2
#| warning: false
#| error: false

import pandas as pd
from io import StringIO
import plotly.graph_objects as go
from IPython.display import display, Markdown

figureName6 = "tbl-source-impact-feux2"

data = """
Nom de la donnée,Résumé,Emprise spatiale,Propriétaire de la donnée,Date de la donnée utilisée et à jour
"Foudres","Localisation des zones touchées par la foudre.","Ensemble de la Nouvelle-Calédonie","Météo France","2020"
"""

df = pd.read_csv(StringIO(data))

table = go.Figure(data=[go.Table(
    header=dict(
        values=list(df.columns),
        fill_color='lightblue',  
        align='left',
        line=dict(color='black', width=2)
    ),
    cells=dict(
        values=[df[col] for col in df.columns],
        fill_color='white',  
        align='left',
        line=dict(color='black', width=2) 
    ))
])

table.add_annotation(
    x=0,
    y=1.21,  
    xref="paper",
    yref="paper",
    text="(f) Effets possibles des phénomènes naturels sur les incendies" ,
    showarrow=False,
    font=dict(size=16, color="black"),
    align="left",
)
table.update_layout(
    width=1700,
    height=130,
    margin=dict(l=0, r=0, t=25, b=0))

title6="Effets possibles des phénomènes naturels sur les incendies"
export_output_plotly(table,figureName6)

```


```{python}
#| echo: false
#| output: true
#| label: tbl-source-impact-substrat
#| warning: false
#| error: false

import pandas as pd
from io import StringIO
import plotly.graph_objects as go
from IPython.display import display, Markdown

figureName7 = "tbl-source-impact-substrat"

data = """
Nom de la donnée,Résumé,Emprise spatiale,Propriétaire de la donnée,Date de la donnée utilisée et à jour
"Formation géologique","Localisation des différents substrats, regroupés en trois groupes majoritaires, que sont le type volcano-sédimentaire, ultramafique et autres, classification obtenue par Brice Sevin, à partir de données de surfaces géologiques au 1/50 000e de la DIMENC","Ensemble de la Nouvelle-Calédonie","Gouvernement de la Nouvelle-Calédonie","2020"
"""

df = pd.read_csv(StringIO(data))

table = go.Figure(data=[go.Table(
    header=dict(
        values=list(df.columns),
        fill_color='lightblue',  
        align='left',
        line=dict(color='black', width=2)
    ),
    cells=dict(
        values=[df[col] for col in df.columns],
        fill_color='white',  
        align='left',
        line=dict(color='black', width=2) 
    ))
])

table.add_annotation(
    x=0,
    y=1.13,  
    xref="paper",
    yref="paper",
    text="(g) Répartition en fonction du substrat" ,
    showarrow=False,
    font=dict(size=16, color="black"),
    align="left",
)

table.update_layout(
    width=1700,
    height=220,
    margin=dict(l=0, r=0, t=25, b=0))

title7="Répartition en fonction du substrat"
export_output_plotly(table,figureName7)

```

```{python}
#| echo: false
#| output: true
#| label: tbl-source-impact-foncier
#| warning: false
#| error: false

import pandas as pd
from io import StringIO
import plotly.graph_objects as go
from IPython.display import display, Markdown

figureName8 = "tbl-source-impact-foncier"

data = """
"Foncier","Localisation de la répartition foncière sur la Nouvelle-Calédonie comprenant le domaine public, le privé ainsi que le foncier coutumier issue du cadastre","Ensemble de la Nouvelle-Calédonie","Gouvernement de la Nouvelle-Calédonie","2018"
"""

df = pd.read_csv(StringIO(data), header=None)
df.columns = ["Nom de la donnée", "Résumé", "Emprise spatiale", "Propriétaire de la donnée", "Date de la donnée utilisée et à jour"]

table = go.Figure(data=[go.Table(
    header=dict(
        values=list(df.columns),
        fill_color='lightblue',  
        align='left',
        line=dict(color='black', width=2)
    ),
    cells=dict(
        values=[df[col] for col in df.columns],
        fill_color='white',  
        align='left',
        line=dict(color='black', width=2) 
    ))
])

table.add_annotation(
    x=0,
    y=1.15,  
    xref="paper",
    yref="paper",
    text="(h) Répartition foncière" ,
    showarrow=False,
    font=dict(size=16, color="black"),
    align="left",
)

table.update_layout(
    width=1700,
    height=180,
    margin=dict(l=0, r=0, t=25, b=0))

export_output_plotly(table,figureName8)

```

\KOMAoptions{paper=landscape,pagesize}
\recalctypearea

\newpage
\newgeometry{top=20mm,left=20mm,right=-60mm,bottom=120mm}

::: {#tbl-source-impact df-print=paged} 

```{python}
display(Markdown(f"[![]({export_file_path}{figureName1}.png)]({export_file_path}{figureName1}.html)"))
```

Présentation des sources d’information utilisées pour réaliser le bilan de l’impact des incendies
:::

\KOMAoptions{paper=landscape,pagesize}
\recalctypearea

\newpage
\newgeometry{top=20mm,left=20mm,right=-60mm,bottom=120mm}

```{python}
display(Markdown(f"[![]({export_file_path}{figureName2}.png)]({export_file_path}{figureName2}.html)"))
```
```{python}
display(Markdown(f"[![]({export_file_path}{figureName3}.png)]({export_file_path}{figureName3}.html)"))
```
```{python}
display(Markdown(f"[![]({export_file_path}{figureName4}.png)]({export_file_path}{figureName4}.html)"))
```

\KOMAoptions{paper=landscape,pagesize}
\recalctypearea

\newpage
\newgeometry{top=20mm,left=20mm,right=-60mm,bottom=120mm}

```{python}
display(Markdown(f"[![]({export_file_path}{figureName5}.png)]({export_file_path}{figureName5}.html)"))
```
```{python}
display(Markdown(f"[![]({export_file_path}{figureName6}.png)]({export_file_path}{figureName6}.html)"))
```
```{python}
display(Markdown(f"[![]({export_file_path}{figureName7}.png)]({export_file_path}{figureName7}.html)"))
```
```{python}
display(Markdown(f"[![]({export_file_path}{figureName8}.png)]({export_file_path}{figureName8}.html)"))
```

{{< pagebreak >}}

\KOMAoptions{paper=portrait,pagesize}
\recalctypearea

\newpage
\newgeometry{top=20mm,left=20mm,right=20mm,bottom=40mm}
