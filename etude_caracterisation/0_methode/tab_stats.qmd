
```{python}
#| echo: false
#| output: true
#| warning: false
#| error: false

# Configurer les paramètres locaux pour utiliser un espace comme séparateur de milliers
locale.setlocale(locale.LC_ALL, 'fr_FR.UTF-8')

def format_number(x):
    return locale.format_string("%d", x, grouping=True)

def tableau_statistiques(data, level_them,label_them,groupby, annee, type_zone, columns,label_col, title,filtre, hauteurtab):
    # Charger et filtrer les données
    data = data.read()

    data_years = data[(data['annee'] == annee) & (data['level'] == type_zone)]

    if level_them is None:
        grouped_data=data_years.groupby(groupby).sum().reset_index()
    else:
        grouped_data=data_years

    if label_them is None:
        pass
    else:
        grouped_data=grouped_data[grouped_data[level_them]==label_them]

    if groupby == 'ZEE':
        grouped_data.loc[grouped_data[groupby] == 'ZONE ECONOMIQUE EXCLUSIVE (ZEE) DE LA NOUVELLE-CALEDONIE', groupby] = 'Nouvelle-Calédonie'
    else:
        pass

    grouped_data = grouped_data[(grouped_data[filtre] != 0) & (grouped_data[filtre].notna())]

    float_columns = [col for col in grouped_data.columns if grouped_data[col].dtype == 'float64']
    int_columns = [col for col in grouped_data.columns if grouped_data[col].dtype == 'int64']

    grouped_data[float_columns] = grouped_data[float_columns].map(lambda x: f"{x:.2f}")
    grouped_data[int_columns] = grouped_data[int_columns].map(lambda x: f"{x:.0f}")
    
    grouped_data= grouped_data[columns]
    grouped_data.columns = label_col

    fig = go.Figure(data=[go.Table(
        header=dict(
            values=list(grouped_data.columns),
            fill_color='lightblue',  
            align='left',
            line=dict(color='black', width=2)
        ),
        cells=dict(
            values=[grouped_data[col] for col in grouped_data.columns],
            fill_color='white',  
            align='left',
            line=dict(color='black', width=2) 
        ))
    ])

    fig.update_layout(
        width=850,
        margin=dict(l=0, r=0, t=0, b=0),
        height=hauteurtab*len(grouped_data),
    )
    
    return fig


```

